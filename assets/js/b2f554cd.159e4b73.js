"use strict";(self.webpackChunkneohaskell_github_io=self.webpackChunkneohaskell_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/0000-index","metadata":{"permalink":"/blog/0000-index","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0000-index/index.mdx","source":"@site/blog/nhep/nhep/0000-index/index.mdx","title":"NHEP 0 - Index of NeoHaskell Evolution Proposals","description":"This NHEP will contain the index of all NeoHaskell Enhancement Proposals, known as NHEPs. NHEP numbers are assigned by the NHEP editors, and once assigned are never changed. The Git history of the NHEP texts represent their historical record.","date":"2023-09-26T00:00:00.000Z","formattedDate":"September 26, 2023","tags":[],"readingTime":0.38,"hasTruncateMarker":false,"authors":[{"name":"Nick Tchayka","title":"Creator of NeoHaskell","url":"https://github.com/NickSeagull","imageURL":"https://github.com/NickSeagull.png","key":"nick"}],"frontMatter":{"title":"NHEP 0 - Index of NeoHaskell Evolution Proposals","authors":["nick"],"date":"2023-09-26T00:00"},"nextItem":{"title":"NHEP 1 - Purpose and Guidelines","permalink":"/blog/0001-purpose-and-guidelines"}},"content":":::caution STATUS - DRAFT\\n:::\\n\\nThis NHEP will contain the index of all **NeoHaskell Enhancement Proposals**, known as NHEPs. NHEP numbers are assigned by the NHEP editors, and once assigned are never changed. The [Git history](https://github.com/neohaskell/NHEP) of the NHEP texts represent their historical record.\\n\\nIn the future, the NHEPs will be listed here by category. For now, use the sidebar on the left.\\n\\nA good starting point is [NHEP 1](./0001-purpose-and-guidelines), which describes the NHEP process itself."},{"id":"/0001-purpose-and-guidelines","metadata":{"permalink":"/blog/0001-purpose-and-guidelines","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0001-purpose-and-guidelines/index.mdx","source":"@site/blog/nhep/nhep/0001-purpose-and-guidelines/index.mdx","title":"NHEP 1 - Purpose and Guidelines","description":"What is a NHEP?","date":"2023-09-26T00:01:00.000Z","formattedDate":"September 26, 2023","tags":[],"readingTime":1.985,"hasTruncateMarker":false,"authors":[{"name":"Nick Tchayka","title":"Creator of NeoHaskell","url":"https://github.com/NickSeagull","imageURL":"https://github.com/NickSeagull.png","key":"nick"}],"frontMatter":{"title":"NHEP 1 - Purpose and Guidelines","authors":["nick"],"date":"2023-09-26T00:01"},"prevItem":{"title":"NHEP 0 - Index of NeoHaskell Evolution Proposals","permalink":"/blog/0000-index"},"nextItem":{"title":"NHEP 2 - Target and User Persona","permalink":"/blog/0002-project-target"}},"content":":::info STATUS - IN PROGRESS\\n:::\\n\\n## What is a NHEP?\\n\\nNHEP stands for NeoHaskell Evolution Proposal. It is a document that describes a change or addition to NeoHaskell.\\n\\n## Statuses of a NHEP\\n\\nA NHEP can have one of the following statuses:\\n\\n:::caution STATUS - DRAFT\\nThis status indicates that the NHEP is still being written and is not ready for review.\\n:::\\n\\n:::info STATUS - IN PROGRESS\\nThis status indicates that the NHEP has been accepted but is still being implemented.\\n:::\\n\\n:::tip STATUS - INTEGRATED\\nThis status indicates that the NHEP has been implemented.\\n:::\\n\\n:::tip STATUS - ACCEPTED\\nThis status is for informational NHEPs that have been accepted.\\n:::\\n\\n:::danger STATUS - REJECTED\\nThis status indicates that the NHEP has been rejected.\\n:::\\n\\n## How to contribute to the design process\\n\\nEveryone is welcome to propose, discuss, and review ideas to improve NeoHaskell in the `#proposals` channel of the Discord server.\\n\\nNote that the project is in a very early stage, and the contribution to the design process is not well defined.\\n\\nAs some general rules for now, take this into account before submitting a proposal:\\n\\n- No \\"What about if NeoHaskell does a 180-degree turn and instead does this completely unrelated thing?\\". These kinds of proposals are **seen as completely out of the scope of the NeoHaskell project and will be instantly dismissed.**\\n- **Use constructive criticism.** Instead of \\"remove this, I don\'t like it\\", take a moment to think and give actual reasons like \\"I believe that this function in the standard library is not clear enough, someone could understand this in a wrong way\\"\\n- Is the problem being addressed **impactful enough** to warrant a change to NeoHaskell?\\n- How does this impact the [**Principle of Least Astonishment**](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) of the project?\\n- How does this impact the [**Principle of Developer Happiness**](https://www.forbes.com/sites/forbestechcouncil/2023/09/22/ensuring-developer-happiness-how-to-hang-on-to-software-engineers) of the project?\\n- How does this impact the [**Principle of Least Effort**](https://simplicable.com/design/principle-of-least-effort) of the project? Both externally for the users and internally for the maintainers.\\n- Does this proposal fit well with the **feel and direction** of NeoHaskell?\\n- What **other libraries/languages** got you inspired to submit this proposal? How does this compare to those?\\n- How much **effort** did you put into your review? A glance, a quick reading, or an in-depth study?\\n\\nPlease **state explicitly** whether you believe that the proposal should be accepted into NeoHaskell."},{"id":"/0002-project-target","metadata":{"permalink":"/blog/0002-project-target","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0002-project-target/index.mdx","source":"@site/blog/nhep/nhep/0002-project-target/index.mdx","title":"NHEP 2 - Target and User Persona","description":"Introduction","date":"2023-09-28T00:00:00.000Z","formattedDate":"September 28, 2023","tags":[],"readingTime":4.855,"hasTruncateMarker":false,"authors":[{"name":"Nick Tchayka","title":"Creator of NeoHaskell","url":"https://github.com/NickSeagull","imageURL":"https://github.com/NickSeagull.png","key":"nick"}],"frontMatter":{"title":"NHEP 2 - Target and User Persona","authors":["nick"],"date":"2023-09-28T00:00"},"prevItem":{"title":"NHEP 1 - Purpose and Guidelines","permalink":"/blog/0001-purpose-and-guidelines"},"nextItem":{"title":"NHEP 3 - Principles of Design","permalink":"/blog/0003-principles-of-design"}},"content":":::tip STATUS - ACCEPTED\\n:::\\n\\n## Introduction\\n\\nThis document defines the target audience and [user persona](<https://en.wikipedia.org/wiki/Persona_(user_experience)>) for the NeoHaskell project.\\n\\nThe definition of this target audience and user persona is intended to guide the design and development of the NeoHaskell project. It is not intended to be a strict definition of who can or cannot use the NeoHaskell project, only a guide to help the project team make decisions. Everyone is welcome to use NeoHaskell, regardless of whether they fit the target audience or user persona.\\n\\nIf a user doesn\'t fit the target audience that doesn\'t mean that they shouldn\'t use NeoHaskell, it just means that the design process and showcasing process won\'t be prioritizing them.\\n\\n## Target Audience\\n\\nThe target audience of NeoHaskell are developers who have a maker/hacker philosophy, who are comfortable with a **statically typed** mainstream language like **TypeScript or Java**, and who are interested in developing a project as fast as possible to test an idea or prototype a product, **even if they aren\'t the most experienced software developers**. They are not interested in spending a lot of time learning a new programming language in-depth, they are not interested in learning software architecture in-depth, and they are not interested in spending a lot of time learning a new framework.\\n\\nThey are interested in learning new things, as long as those are steps in the direction of their goal. They are willing to learn a new programming language, as long as they can start writing code in a few hours. They are willing to learn a new framework, as long as they can start using it in a few hours. They are willing to learn a new architecture, as long as they can start using it in a few hours.\\n\\nThese are not interested in having a perfect code quality from the beginning, so they **won\'t be investing time in thoroughly testing their code**, regardless of the testing methodology. And although they do not know it, they value working in a **domain-driven** way.\\n\\nThey will probably be interested in learning more about the programming language, the framework, and the architecture, but only after they have a working prototype of their project.\\n\\nThey don\'t have enough time to spend on their projects, probably because they have a full-time job, or they are students, or they have a family, or they have other hobbies. So they prefer a command line tool that does everything for them, instead of having to research the different tools for their technology stack, and then having to configure them to work together.\\n\\n### Who\'s not the target audience\\n\\nWell-seasoned developers who have experience either in Haskell or in functional programming in general, and who are looking to apply concepts well-established in the functional world.\\n\\nUsers who are interested in type theory, category theory, programming language theory, and other advanced topics in computer science.\\n\\nAgain, if a user doesn\'t fit the target audience doesn\'t mean that they shouldn\'t use NeoHaskell, it just means that the design process and showcasing process won\'t be prioritizing them.\\n\\n## User Persona\\n\\n- **Name**: Jess\\n- **Role**: Junior Software Developer\\n\\n### Actions, Motivations, and Pains\\n\\n- **What do I do?**\\n  - Work full-time as a software developer in a TypeScript software shop.\\n  - In the evenings and weekends I try to build up my portfolio by working on side projects.\\n  - Learning good practices, patterns, and technologies that act as leverage for my learning process.\\n- **Why do I do it?**\\n  - I want to improve my skills as a software developer.\\n  - Having a good portfolio will help me get a better job.\\n  - One of my projects might become a startup.\\n- **What do I want?**\\n  - I want to build a project as fast as possible.\\n  - I want to have negotiation power by mentioning skills that are relevant in the market, regardless of the technology stack.\\n  - I want to have fun while learning.\\n- **What\'s stopping me?**\\n  - There are a lot of things to learn, and I don\'t know where to start.\\n  - Many times, existing tools have so many pitfalls that I end up spending more time fixing them than actually working on my project, which is frustrating.\\n  - I don\'t have enough experience to reason too much about all the side-effects that are happening under the hoods, that make my code behave in unexpected ways. This leads to a lot of frustration, and I end up thinking that I\'m not good enough to be a software developer.\\n\\n### Values\\n\\n- **What convinces me?**\\n  - Having good documentation that explains the concepts that I need to know.\\n  - Having recipes and precise instructions on the steps I need to follow to achieve my goals.\\n  - Being able to understand the code that I\'m looking at.\\n  - Success stories of other people of my skill level who have achieved similar goals as mine.\\n- **What or who informs me?**\\n  - Dev.to\\n  - Friends and colleagues\\n  - Twitter\\n\\n### Context\\n\\n- **Where am I?**\\n  - At home\\n  - At a coffee shop\\n  - On public transportation\\n- **What\'s my day to day?**\\n  - One hour commute to and from work\\n  - Attend daily standup meetings\\n  - Work on my assigned tasks\\n  - Have to do groceries and other chores after work\\n  - Spend time with my family\\n  - If there\'s time left, work on my side projects\\n\\n## Conclusion\\n\\nHere we describe the target audience and user persona for NeoHaskell. All the design and development decisions will be made with this target audience and user persona in mind.\\n\\nWe will try to make the project as accessible as possible for these kinds of users. So they can enjoy even the last 15 minutes of the day, where they have time to work on their side projects."},{"id":"/0003-principles-of-design","metadata":{"permalink":"/blog/0003-principles-of-design","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0003-principles-of-design/index.mdx","source":"@site/blog/nhep/nhep/0003-principles-of-design/index.mdx","title":"NHEP 3 - Principles of Design","description":"Introduction","date":"2023-10-03T00:00:00.000Z","formattedDate":"October 3, 2023","tags":[],"readingTime":4.76,"hasTruncateMarker":false,"authors":[{"name":"Nick Tchayka","title":"Creator of NeoHaskell","url":"https://github.com/NickSeagull","imageURL":"https://github.com/NickSeagull.png","key":"nick"}],"frontMatter":{"title":"NHEP 3 - Principles of Design","authors":["nick"],"date":"2023-10-03T00:00"},"prevItem":{"title":"NHEP 2 - Target and User Persona","permalink":"/blog/0002-project-target"},"nextItem":{"title":"NHEP 4 - Semantic Versioning","permalink":"/blog/0004-semantic-versioning"}},"content":":::tip STATUS - ACCEPTED\\n:::\\n\\n## Introduction\\n\\nThis document defines the design principles that guide the design and implementation processes of NeoHaskell. They are\\nintended to guide the decisions in both the high-level, as well as the low-level, decision-making process of the project.\\n\\nTheir purpose is to ensure that the project prioritizes the correct aspects of the design and implementation, and that\\n[the target audience and user persona](/blog/0002-project-target) are kept in mind at all times, as they are the most\\nimportant stakeholders of the project.\\n\\n## Principle of Least Astonishment\\n\\nThe Principle of Least Astonishment, also known as the Principle of Least Surprise, is a guideline in user interface and software design that emphasizes creating systems that behave in a manner consistent with user expectations, thereby minimizing user surprise and confusion. The principle advises that system components should act in alignment with widely accepted conventions and their syntactical indications. It encourages designers to ensure that the behavior of a system or feature closely matches users\' existing knowledge and expectations to reduce the learning curve and prevent user astonishment. Although the principle originated in the late 1960s, it remains relevant in different technological platforms and settings to ensure that functionalities such as keyboard shortcuts, widgets, or method names are intuitive and adhere to familiar patterns for users, thereby enhancing user experience and system usability.\\n\\n### Examples\\n\\nThose might not look like much, but they are details that end up stacking and streamlining the overall experience. The aim is to reduce the cognitive load on the user, and they are already learning a new language and ecosystem, so we should remove as much\\nstuff to learn as possible. For example, promoting:\\n\\n- JSON or YAML as configuration formats instead of TOML or Dhall.\\n- Git as the version control software instead of Darcs or Pijul.\\n- GitHub as the code hosting platform instead of GitLab or BitBucket.\\n- Visual Studio Code as the IDE instead of Emacs or Vim.\\n\\n## Principle of Developer Happiness\\n\\nThe Principle of Developer Happiness prioritizes establishing an environment that aligns with software developers\' professional and personal expectations, thereby enhancing satisfaction and retention. It underscores creating engaging experiences and a supportive culture where developers are fairly compensated, and find alignment with the group\'s mission. Additionally, it advocates for the use of efficient tools and technologies to streamline the development process and save time. Finally, it emphasizes continuous visibility into and assessment of developer efficiency through surveys and feedback, ensuring a continually optimized working environment that resonates with developer needs and expectations. This principle aims to meld operational strategies with developer satisfaction, ensuring an atmosphere that intuitively supports developers.\\n\\n### Examples\\n\\nThis principle emphasizes creating an environment that aligns with the expectations of both developers and users of NeoHaskell. It centers around fostering satisfaction, engagement, and a supportive community. Here are some examples:\\n\\n- **Clear Documentation**: Provide user-friendly and comprehensive documentation with code examples.\\n- **Community Engagement**: Encourage active participation and collaboration within the open-source community.\\n- **Transparent Decision-Making**: Maintain transparency in language development decisions.\\n- **Inclusive Onboarding**: Offer resources for developers of all skill levels.\\n- **Recognition**: Acknowledge and appreciate contributions and projects from the community.\\n- **Feedback Channels**: Create accessible channels for users and contributors to provide input and report issues.\\n\\n## Principle of Least Effort\\n\\nThe Principle of Least Effort underscores the axiom that entities, within a given context, will opt for the solution that requires the minimal amount of work or complexity to achieve a specific goal. Applied within the realm of software design and development, it emphasizes creating systems and interfaces that are straightforward, easy to comprehend, and simple to interact with, thereby reducing the cognitive and operational load on both the user and developer. On the user\'s side, interfaces should be intuitive, providing the easiest pathway to accomplish tasks with minimum steps and complexity. For developers, this principle encourages the creation of code and architectures that are clean, succinct, and straightforward to understand and modify. Ultimately, adhering to the Principle of Least Effort enables the creation of more user-friendly applications and sustainably maintainable codebases, promoting efficient and effective interactions for all involved parties.\\n\\n### Examples\\n\\n- **Simple Syntax**: Design the language with a straightforward and intuitive syntax to reduce the cognitive load on developers using the language.\\n- **Clear and Concise Documentation**: Provide comprehensive yet concise documentation to help users understand and utilize the language effectively without unnecessary complexity.\\n- **Standard Libraries**: Include a well-organized standard library that simplifies common programming tasks, reducing the effort required to implement them from scratch.\\n- **Error Handling**: Implement user-friendly error messages and handling mechanisms that assist developers in identifying and resolving issues efficiently.\\n- **Community Support**: Foster a supportive community where developers can seek help, share knowledge, and collaborate, reducing the effort needed to overcome challenges.\\n- **Version Management**: Streamline version management and updates to make it easy for users to adopt new language features and improvements.\\n\\n## Conclusion\\n\\nIn conclusion, the design principles outlined for NeoHaskell serve as a fundamental compass for the project\'s development and implementation processes. The Principle of Least Astonishment underscores the importance of aligning system behavior with user expectations, enhancing user experience and usability. The Principle of Developer Happiness focuses on creating an environment that satisfies both developers and users, emphasizing engagement, transparency, and continuous improvement. Lastly, the Principle of Least Effort promotes simplicity and efficiency, reducing the cognitive and operational load on users and developers alike.\\n\\nThese principles collectively ensure that NeoHaskell remains user-centric, developer-friendly, and efficient throughout its development journey. By adhering to these guiding principles, NeoHaskell aims to not only meet but exceed the expectations of its target audience and user persona, ultimately leading to a successful and user-satisfying language."},{"id":"/0004-semantic-versioning","metadata":{"permalink":"/blog/0004-semantic-versioning","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0004-semantic-versioning/index.mdx","source":"@site/blog/nhep/nhep/0004-semantic-versioning/index.mdx","title":"NHEP 4 - Semantic Versioning","description":"Introduction","date":"2023-10-06T00:00:00.000Z","formattedDate":"October 6, 2023","tags":[],"readingTime":2.55,"hasTruncateMarker":false,"authors":[{"name":"Nick Tchayka","title":"Creator of NeoHaskell","url":"https://github.com/NickSeagull","imageURL":"https://github.com/NickSeagull.png","key":"nick"}],"frontMatter":{"title":"NHEP 4 - Semantic Versioning","authors":["nick"],"date":"2023-10-06T00:00"},"prevItem":{"title":"NHEP 3 - Principles of Design","permalink":"/blog/0003-principles-of-design"},"nextItem":{"title":"NHEP 5 - Better Default String Type","permalink":"/blog/0005-better-default-string-type"}},"content":":::tip STATUS - ACCEPTED\\n:::\\n\\n## Introduction\\n\\nIn the context of the NeoHaskell ecosystem, we employ the [Semantic Versioning](https://semver.org/) (SemVer) schema. SemVer consists of a set of rules and guidelines for assigning and incrementing version numbers within our software development process. By embracing SemVer, NeoHaskell addresses the intricacies of managing dependencies, especially as the ecosystem complexity evolves. The primary objective of utilizing Semantic Versioning within the NeoHaskell ecosystem is to ensure that our version numbers are both transparent and informative, effectively communicating the nature of changes made to our software.\\n\\n## Impact on Principle of Least Astonishment\\n\\nSemantic Versioning has a positive impact on the Principle of Least Astonishment. First of all, it is a very popular schema, used by many open-source projects. Second, adhering to clear and consistent rules for version numbering reduces confusion and surprises for developers and users of software packages. When version numbers follow a predictable pattern (Major.Minor.Patch), it becomes easier for stakeholders to understand the significance of each release. This predictability enhances the user experience and makes it easier to manage software dependencies.\\n\\n## Impact on Principle of Developer Happiness\\n\\nSemantic Versioning contributes to the Principle of Developer Happiness. It provides developers with a systematic approach to versioning, which simplifies the process of releasing and upgrading software packages. Developers can confidently make changes to their codebase while following SemVer guidelines, knowing that version numbers convey the impact of those changes. This reduces the stress associated with managing dependencies and allows developers to focus on building and improving their software.\\n\\n## Impact on Principle of Least Effort\\n\\nSemantic Versioning aligns with the Principle of Least Effort by streamlining the management of software dependencies. When developers adhere to SemVer, they can make backward-compatible changes without having to release new major versions. This reduces the effort required to maintain and update software packages. Additionally, clear documentation of public APIs and the use of version numbers to indicate compatibility further simplify the integration of dependencies, minimizing the effort needed to ensure smooth interactions between software components.\\n\\n## Usage of SemVer in early development phases\\n\\nDuring the early development of the NeoHaskell project, the major version will be kept at 0, so that the community can expect breaking changes to occur frequently. Once the project reaches a stable state, the major version will be incremented to 1, indicating that breaking changes will be made less frequently.\\n\\n## Standardizing the use of SemVer\\n\\nThe Semantic Versioning schema is advised as a standard for all NeoHaskell projects, as it will help all of the ecosystem to be in sync.\\n\\nThe `neo` CLI tool will easily help bumping versions, as it will inspect the exported functions and types and will suggest the next version based on the changes made.\\n\\n## Considerations\\n\\nNote that even though the API of a package is not changed, the implementation of a function can be changed, which can lead to different results. This is considered a breaking change and should be reflected in the version number.\\n\\nTake a look at this [GitHub thread](https://github.com/semver/semver/issues/311) for examples and more information."},{"id":"/0005-better-default-string-type","metadata":{"permalink":"/blog/0005-better-default-string-type","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0005-better-default-string-type/index.mdx","source":"@site/blog/nhep/nhep/0005-better-default-string-type/index.mdx","title":"NHEP 5 - Better Default String Type","description":"Introduction","date":"2023-10-21T00:00:00.000Z","formattedDate":"October 21, 2023","tags":[],"readingTime":1.665,"hasTruncateMarker":false,"authors":[{"name":"SiriusStarr","title":"NeoHaskell Contributor","url":"https://github.com/SiriusStarr","imageURL":"https://github.com/SiriusStarr.png","key":"siriusstarr"}],"frontMatter":{"title":"NHEP 5 - Better Default String Type","authors":["siriusstarr"],"date":"2023-10-21T00:00"},"prevItem":{"title":"NHEP 4 - Semantic Versioning","permalink":"/blog/0004-semantic-versioning"},"nextItem":{"title":"NHEP 6 - Better Default List Type","permalink":"/blog/0006-better-default-list-type"}},"content":":::tip STATUS - DRAFT\\n:::\\n\\n## Introduction\\n\\nBy default, Haskell\'s `String` type is only an alias for `[Char]` and as such is inefficient for non-trivial uses (e.g. due to slow appends). The `text` package provides a more sensible `Text` type and has become essentially the standard within the Haskell ecosystem.\\n\\nNeoHaskell should use `Text` as its default string type under the more familiar name `String` and support literals via the standard `\\"double quoted\\"` syntax.\\n\\n## Impact on Principle of Least Astonishment\\n\\nThe fact that a simple string literal is inefficient and usually undesirable violates the Principle of Least Astonishment. Most new programmers expect `String` and `\\"string literals\\"` to work as expected without any additional effort. This change will align NeoHaskell with those expectations.\\n\\n## Impact on Principle of Developer Happiness\\n\\nAs noted below, this change will require less boilerplate of developers and allow them to get to actual code faster. Eliminating the use of `OverloadedStrings` will also cut down on unexpected type errors.\\n\\n## Impact on Principle of Least Effort\\n\\nCurrently, nearly every Haskell project requires a dependency on `text` and files are littered with `import Data.Text`s and `{-# LANGUAGE OverloadedStrings #-}`s. This change will eliminate all of that overhead and allow the use of a sensible string type with better ergonomics.\\n\\n## Implementation\\n\\nIn early stages, this can be achieved via prelude and pragmas by `newtype`ing `Text` to `String` and use of `OverloadedStrings` with:\\n\\n```haskell\\ndefault IsString String -- where String is the new type over Text\\n```\\n\\n## Considerations\\n\\nSince `Text` is the standard for most of the Haskell ecosystem, this change is unlikely to have many negative ramifications, other than possible confusion over the `String` type in NeoHaskell actually being `Text` and not `String`, but this is only of concern for developers stepping outside of the NeoHaskell ecosystem.\\n\\nAnother consideration is the existence of the other common data type `ByteString`. `Text` is more often the sensible default for all except extremely performance-critical applications, so this should not be a problem."},{"id":"/0006-better-default-list-type","metadata":{"permalink":"/blog/0006-better-default-list-type","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0006-better-default-list-type/index.mdx","source":"@site/blog/nhep/nhep/0006-better-default-list-type/index.mdx","title":"NHEP 6 - Better Default List Type","description":"Introduction","date":"2023-10-21T00:02:00.000Z","formattedDate":"October 21, 2023","tags":[],"readingTime":1.675,"hasTruncateMarker":false,"authors":[{"name":"SiriusStarr","title":"NeoHaskell Contributor","url":"https://github.com/SiriusStarr","imageURL":"https://github.com/SiriusStarr.png","key":"siriusstarr"}],"frontMatter":{"title":"NHEP 6 - Better Default List Type","authors":["siriusstarr"],"date":"2023-10-21T00:02"},"prevItem":{"title":"NHEP 5 - Better Default String Type","permalink":"/blog/0005-better-default-string-type"},"nextItem":{"title":"NHEP 7 - More Concise Type Signature Syntax","permalink":"/blog/0007-more-concise-type-signature-syntax"}},"content":":::tip STATUS - DRAFT\\n:::\\n\\n## Introduction\\n\\nBy default, Haskell\'s `List` type is a simple linked list and as such is inefficient for many common operations (getting by index, appending, iterating from the end, etc.). A number of other more efficient list-like data structures are available, most notably the array-like `Vector` and the list-like `Seq`.\\n\\nNeoHaskell should choose one of these two data structures as its default list type and support literals via the standard `[1, 2, 3]` syntax.\\n\\n## Impact on Principle of Least Astonishment\\n\\nThe fact that a simple list literal is inefficient to append or get by index and usually undesirable violates the Principle of Least Astonishment. Most new programmers expect sytactic sugar like `[1, 2, 3]\\"` to produce a commonly desirable data type without any additional effort. This change will align NeoHaskell with those expectations.\\n\\n## Impact on Principle of Developer Happiness\\n\\nAs noted below, this change will require less boilerplate of developers and allow them to get to actual code faster, as well as gently guiding developers to choose a data type without them having to decide which to use.\\n\\n## Impact on Principle of Least Effort\\n\\nCurrently, nearly every Haskell project requires a dependency on `containers` and/or `vector` and files are littered with `import`s and `{-# LANGUAGE OverloadedList #-}`s. This change will eliminate all of that overhead and allow the use of a sensible list type with better ergonomics.\\n\\n## Implementation\\n\\nIn early stages, this can be achieved via prelude and pragmas by the use of `OverloadedLists` with:\\n\\n```haskell\\ndefault IsList Vector -- or Seq\\n```\\n\\n## Considerations\\n\\nHaskell\'s default lists are more efficient for LIFO queues than either of these data types. There could, however, be a `Queue` data type or the like to push developers in that when it\'s desirable.\\n\\nList comprehensions (if they will be in NeoHaskell) would need to support this data type as well.\\n\\n`Vector` is not pattern-matchable on. `Seq` does not have this issue, which might be a point in favor of it."},{"id":"/0007-more-concise-type-signature-syntax","metadata":{"permalink":"/blog/0007-more-concise-type-signature-syntax","editUrl":"https://github.com/neohaskell/nhep/edit/main/nhep/0007-more-concise-type-signature-syntax/index.mdx","source":"@site/blog/nhep/nhep/0007-more-concise-type-signature-syntax/index.mdx","title":"NHEP 7 - More Concise Type Signature Syntax","description":"Introduction","date":"2023-10-26T00:00:00.000Z","formattedDate":"October 26, 2023","tags":[],"readingTime":1.585,"hasTruncateMarker":false,"authors":[{"name":"SiriusStarr","title":"NeoHaskell Contributor","url":"https://github.com/SiriusStarr","imageURL":"https://github.com/SiriusStarr.png","key":"siriusstarr"}],"frontMatter":{"title":"NHEP 7 - More Concise Type Signature Syntax","authors":["siriusstarr"],"date":"2023-10-26T00:00"},"prevItem":{"title":"NHEP 6 - Better Default List Type","permalink":"/blog/0006-better-default-list-type"}},"content":":::tip STATUS - DRAFT\\n:::\\n\\n## Introduction\\n\\nHaskell uses `::` for type signatures (and the shorter `:` for cons). Type signatures are generally far, far more numerous than cons operations/pattern matches, and so most Haskell-descended languages have chosen to use `:` for type signatures instead, for the sake of cleaner-looking code and fewer developer keypresses. `:` for cons does highlight the importance of lists in the original conception of Haskell, but with the default list type possibly changing (per [NHEP 6](https://neohaskell.org/blog/0006-better-default-list-type)), it will likely be de-emphasized in NeoHaskell.\\n\\nNeoHaskell should use a single colon `:` to denote type signatures instead.\\n\\n## Impact on Principle of Least Astonishment\\n\\nMost languages descended from Haskell have made this change, including Elm, Idris, and Agda. Additionally, many unrelated languages use the same syntax for types, including F#, Dhall, and OCaml, or similar syntax featuring a single colon, e.g. TypeScript, Elixir, Rust, and Python (for type hints).\\n\\nAlmost no other language except Purescript uses `::` while all of the aforementioned use `:` in some capacity, so this change will make NeoHaskell\'s syntax more intuitive to non-Haskell developers.\\n\\n## Impact on Principle of Developer Happiness\\n\\nSince there are far, far more type signatures than cons in most Haskell code, this change renders syntax visually cleaner, more familiar, and reduces the number of required keypresses.\\n\\n## Impact on Principle of Least Effort\\n\\nAs mentioned above, this change reduces the number of required keypresses to write a type signature.\\n\\n## Considerations\\n\\nThis will require a change to the cons operator of lists. `::` is of course available, though that could perhaps be used for a new default list type instead per [NHEP 6](https://neohaskell.org/blog/0006-better-default-list-type). Regardless, this decision must be made as well.\\n\\nThis change will render NeoHaskell slightly less familiar to Haskell developers. However, as noted above, most other languages descended from Haskell have made the same change, and it is unlikely to cause significant friction."}]}')}}]);